opendir / readdir / closedir

	#include <dirent.h>
	DIR * opendir(const char *filename);
	struct dirent * readdir(DIR *dirp);
	int closedir(DIR *dirp);

	The opendir() function opens the directory named by filename, associates
     a directory stream with it and returns a pointer to be used to identify
     the directory stream in subsequent operations.  The pointer NULL is
     returned if filename cannot be accessed, or if it cannot malloc(3) enough
     memory to hold the whole thing, and sets the global variable errno to
     indicate the error.

	 The readdir() function returns a pointer to the next directory entry.  It
     returns NULL upon reaching the end of the directory or on error.  In the
     event of an error, errno may be set to any of the values documented for
     the getdirentries(2) system call.

	 The closedir() function closes the named directory stream and frees the
     structure associated with the dirp pointer, returning 0 on success.  On
     failure, -1 is returned and the global variable errno is set to indicate
     the error.

	 Sample code which searches a directory for entry ``name'' is:

           dirp = opendir(".");
           if (dirp == NULL)
                   return (ERROR);
           len = strlen(name);
           while ((dp = readdir(dirp)) != NULL) {
                   if (dp->d_namlen == len && strcmp(dp->d_name, name) == 0) {
                           (void)closedir(dirp);
                           return (FOUND);
                   }
           }
           (void)closedir(dirp);
           return (NOT_FOUND);

stat / lstat (use for ls -l)
	int stat(const char *restrict path, struct stat *restrict buf);
	int lstat(const char *restrict path, struct stat *restrict buf);

	The stat() function obtains information about the file pointed to by
     path.  Read, write or execute permission of the named file is not
     required, but all directories listed in the path name leading to the file
     must be searchable.

     The lstat() function is like stat() except in the case where the named
     file is a symbolic link; lstat() returns information about the link,
     while stat() returns information about the file the link references.  The
     attributes cannot be relied on in case of symbolic links.  In this case,
     the only attributes returned from an lstat() that refer to the symbolic
     link itself are the file type (S_IFLNK), size, blocks, and link count
     (always 1).

	 struct stat { /* when _DARWIN_FEATURE_64_BIT_INODE is defined */
         dev_t           st_dev;           /* ID of device containing file */
         mode_t          st_mode;          /* Mode of file (see below) */
         nlink_t         st_nlink;         /* Number of hard links */
         ino_t           st_ino;           /* File serial number */
         uid_t           st_uid;           /* User ID of the file */
         gid_t           st_gid;           /* Group ID of the file */
         dev_t           st_rdev;          /* Device ID */
         struct timespec st_atimespec;     /* time of last access */
         struct timespec st_mtimespec;     /* time of last data modification */
         struct timespec st_ctimespec;     /* time of last status change */
         struct timespec st_birthtimespec; /* time of file creation(birth) */
         off_t           st_size;          /* file size, in bytes */
         blkcnt_t        st_blocks;        /* blocks allocated for file */
         blksize_t       st_blksize;       /* optimal blocksize for I/O */
         uint32_t        st_flags;         /* user defined flags for file */
         uint32_t        st_gen;           /* file generation number */
         nlink_t  st_nlink;  /* number of hard links to the file */
         uid_t    st_uid;    /* user-id of owner */
         gid_t    st_gid;    /* group-id of owner */
         dev_t    st_rdev;   /* device type, for special file inode */
         struct timespec st_atimespec;  /* time of last access */
         struct timespec st_mtimespec;  /* time of last data modification */
         struct timespec st_ctimespec;  /* time of last file status change */
         off_t    st_size;   /* file size, in bytes */
         quad_t   st_blocks; /* blocks allocated for file */
         u_long   st_blksize;/* optimal file sys I/O ops blocksize */
         u_long   st_flags;  /* user defined flags for file */
         u_long   st_gen;    /* file generation number */

getpwuid
	#include <sys/types.h>
	#include <pwd.h>
	#include <uuid/uuid.h>
	struct passwd * getpwuid(uid_t uid);
	search the password database for the given user uid,
	always returning the first one encountered.
(in pwd)	struct passwd {
                   char    *pw_name;       /* user name */
                   char    *pw_passwd;     /* encrypted password */
                   uid_t   pw_uid;         /* user uid */
                   gid_t   pw_gid;         /* user gid */
                   time_t  pw_change;      /* password change time */
                   char    *pw_class;      /* user access class */
                   char    *pw_gecos;      /* Honeywell login info */
                   char    *pw_dir;        /* home directory */
                   char    *pw_shell;      /* default shell */
                   time_t  pw_expire;      /* account expiration */
                   int     pw_fields;      /* internal: fields filled in */
           };
		   NULL if the entry is not found or if an error occurs.
getgrgid
	#include <grp.h>
	#include <uuid/uuid.h>
	struct group * getgrgid(gid_t gid);
	struct group
	{
		char    *gr_name;       /* group name */
		char    *gr_passwd;     /* group password */
		gid_t   gr_gid;         /* group id */
		char    **gr_mem;       /* group members */
	};
	search the group database for the given group id given by gid, returning the first one encountered.
	return 0 if no error occurred, or an error number to indicate failure.
     It is not an error if a matching entry is not found.  (Thus, if result is
     set to NULL and the return value is 0, no matching entry exists.)
time / ctime
	#include <time.h>
	(get time of day)
	time_t time(time_t *tloc);
	DESCRIPTION
     The time() function returns the value of time in seconds since 0 hours, 0
     minutes, 0 seconds, January 1, 1970, Coordinated Universal Time, without
     including leap seconds.  If an error occurs, time() returns the value
     (time_t)-1.

	 char * ctime(const time_t *clock);
	 take as an argument a time value representing the time in seconds since the Epoch (00:00:00
     UTC, January 1, 1970; see time(3)). adjusts the time value for the current time zone


readlink
ssize_t readlink(const char *restrict path, char *restrict buf, size_t bufsize);

readlink places the contents of the symbolic link path in the buffer buf, which
has size bufsize.  Readlink does not append a NUL character to buf.

The call returns the count of characters placed in the buffer if it succeeds,
or a -1 if an error occurs,

perror / strerror
void perror(const char *s);
char * strerror(int errnum);
functions look up the error message string corresponding to an error number.

The strerror() function accepts an error number argument errnum and returns a pointer to the corresponding message string.
listxattr
The perror() function finds the error message corresponding to the current value of the global variable errno
     (intro(2)) and writes it, followed by a newline, to the standard error file descriptor.  If the argument s is
     non-NULL and does not point to the null character, this string is prepended to the message string and separated from
     it by a colon and space (``: ''); otherwise, only the error message string is printed.

     If the error number is not recognized, these functions return an error message string containing ``Unknown error: ''
     followed by the error number in decimal.  The strerror() and strerror_r() functions return EINVAL as a warning.
     Error numbers recognized by this implementation fall in the range 0 <= errnum < sys_nerr

getxattr
#include <sys/xattr.h>
ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options);

Extended attributes extend the basic attributes of files and directories in the file system.  They are
     stored as name:data pairs associated with file system objects (files, directories, symlinks, etc).

     The getxattr() function retrieves up to size bytes of data from the extended attribute identified by
     name associated with path into the pre-allocated buffer pointed to by value.  The function returns the
     number of bytes of data retrieved.

     An extended attribute's name is a simple NULL-terminated UTF-8 string.  position specifies an offset
     within the extended attribute.  In the current implementation, this argument is only used with the
     resource fork attribute.  For all other extended attributes, this parameter is reserved and should be
     zero.

     On success, value contains the data associated with name.  When value is set to NULL, getxattr()
     returns current size of the named attribute.  This facility can be used to determine the size of a
     buffer sufficiently large to hold the data currently associated with the attribute.

	 RETURN VALUES
     On success, the size of the extended attribute data is returned.  On failure, -1 is returned and the
     global variable errno is set as follows.

ERRORS
     [ENOATTR]          The extended attribute does not exist.

     [ENOTSUP]          The file system does not support extended attributes or has the feature disabled.

     [ERANGE]           value (as indicated by size) is too small to hold the extended attribute data.

     [EPERM]            The named attribute is not permitted for this type of object.

     [EINVAL]           name is invalid or options has an unsupported bit set.

     [EISDIR]           path or fd do not refer to a regular file and the attribute in question is only
                        applicable to files.  Similar to EPERM.

     [ENOTDIR]          A component of path 's prefix is not a directory.

     [ENAMETOOLONG]     The length of name exceeds XATTR_MAXNAMELEN UTF-8 bytes, or a component of path
                        exceeds NAME_MAX characters, or the entire path exceeds PATH_MAX characters.

     [EACCES]           Search permission is denied for a component of path or the attribute is not allowed
                        to be read (e.g. an ACL prohibits reading the attributes of this file).

     [ELOOP]            Too many symbolic links were encountered in translating the pathname.

     [EFAULT]           path or name points to an invalid address.

     [EIO]              An I/O error occurred while reading from or writing to the file system.
◦ exit
